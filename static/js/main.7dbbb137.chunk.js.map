{"version":3,"sources":["components/form/Form.jsx","components/display/Display.jsx","components/utils/Utils.jsx","components/app/App.jsx","serviceWorker.js","index.js"],"names":["Form","className","action","htmlFor","class","type","id","placeholder","value","this","props","message","onChange","handleChange","Component","Display","items","Utils","oscillator","ctx","window","AudioContext","webkitAudioContext","onClick","t","currentTime","createOscillator","frequency","gainNode","createGain","gain","setValueAtTime","morseCode","split","forEach","letter","connect","destination","start","stop","disconnect","App","state","bind","event","setState","target","morse","toLowerCase","output","morseOutput","i","push","circle","dash","whitespace","it","length","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7dbbb137.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './form.css'\n\nclass Form extends Component {\n    render() {\n        return (\n            <div className=\"form\">\n                <form action=\"\" className=\"form\">\n                    <label htmlFor=\"message\" className=\"inp-label\">Your message</label> <i class=\"fas fa-level-down-alt\"></i><br />\n                    <input \n                    type=\"text\" \n                    className=\"inp-area\" \n                    id=\"message\"\n                    placeholder=\"Type here\"\n                    value={this.props.message}\n                    onChange={this.props.handleChange}\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React from \"react\";\nimport \"../app/App.css\";\nimport './display.css'\n\nconst Display = (props) => {\n  return (\n    <div id=\"display\">\n      {props.message && (\n        <div className=\"d-flex\">\n          <h1>Coded Message is :</h1>\n          <div id=\"res\">{props.items}</div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Display;\n","import React from \"react\";\nimport \"./utils.css\";\n\nconst Utils = (props) => {\n  //Sound on code\n  var AudioContext = window.AudioContext || window.webkitAudioContext;\n  var ctx = new AudioContext();\n  var dot = 1.2 / 15;\n  var oscillator;\n\n  const check = () => {\n    var t = ctx.currentTime;\n    oscillator = ctx.createOscillator();\n    oscillator.type = \"sine\";\n    oscillator.frequency.value = 500;\n\n    var gainNode = ctx.createGain();\n    gainNode.gain.setValueAtTime(0, t);\n\n    props.morseCode.split(\"\").forEach((letter) => {\n      switch (letter) {\n        case \".\":\n          gainNode.gain.setValueAtTime(1, t);\n          t += dot;\n          gainNode.gain.setValueAtTime(0, t);\n          t += dot;\n          break;\n        case \"-\":\n          gainNode.gain.setValueAtTime(1, t);\n          t += 3 * dot;\n          gainNode.gain.setValueAtTime(0, t);\n          t += dot;\n          break;\n        case \" \":\n          t += 7 * dot;\n          break;\n        default:\n          t += 5 * dot;\n      }\n    });\n    oscillator.connect(gainNode);\n    gainNode.connect(ctx.destination);\n    oscillator.start();\n  };\n  const off = () => {\n    oscillator.stop(); // Stop oscillator after 0 seconds\n    oscillator.disconnect(); // Disconnect oscillator so it can be picked up by browserâ€™s garbage collector\n  };\n  return (\n    <div className=\"utils\">\n      {props.message && (\n        <div className='btn'>\n          <button id=\"sound\"  onClick={check}>\n            <i class=\"fas fa-play-circle\"></i>\n          </button>\n          <button id=\"sound\" onClick={off}>\n            <i class=\"fas fa-pause-circle\"></i>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Utils;\n","import React, {Component} from 'react';\nimport Form from '../form/Form'\nimport Display from '../display/Display'\nimport Utils from '../utils/Utils'\nimport './App.css';\n\nclass App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          message : '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange (event){\n        this.setState({message: event.target.value});\n    }\n  render(){\n    const  morse = {\n    'a': '.-',    'b': '-...',  'c': '-.-.', 'd': '-..',\n    'e': '.',     'f': '..-.',  'g': '--.',  'h': '....',\n    'i': '..',    'j': '.---',  'k': '-.-',  'l': '.-..',\n    'm': '--',    'n': '-.',    'o': '---',  'p': '.--.',\n    'q': '--.-',  'r': '.-.',   's': '...',  't': '-',\n    'u': '..-',   'v': '...-',  'w': '.--',  'x': '-..-',\n    'y': '-.--',  'z': '--..',  ' ': '/',\n    '1': '.----', '2': '..---', '3': '...--', '4': '....-', \n    '5': '.....', '6': '-....', '7': '--...', '8': '---..', \n    '9': '----.', '0': '-----', \n            // misc:\n        '.': '.-.-.-', ',': '--..--', '?': '..--..',  \n        '/': '-..-.',  '(': '-.--.',  ')': '-.--.-',  '&': '.-...',\n        ':': '---...', ';': '-.-.-.', '=': '-...-',   '+': '.-.-.',\n        '-': '-....-', '-': '..--.-', \n        '!': '-.-.--', '@': '.--.-.',\n}\n  let  value = this.state.message.toLowerCase();\n\tlet output = ''\n\tvar morseOutput = []\n\tfor(var i in value){\n\t\tif(morse[value[i]]){\n\t\t\toutput += morse[value[i]]\n\t\t\tmorseOutput.push(morse[value[i]])\n\t\t}\n\t}\n    const items =[];\n    const circle = <div className='circle'></div>\n    const dash = <div className=\"dash\"></div>\n    const whitespace = <div className=\"whitespace\"></div>\n    for (var it=0 ; it<output.length; it++){\n      if (output[it] === '.'){\n        items.push(circle);\n      }else if (output[it] === '-'){\n        items.push(dash);\n      }else if (output[it] === '/'){\n        items.push(whitespace);\n      }\n    }\n    console.log(items)\n   \n  // HTML\n    return (\n      <div className=\"App\">\n      <div >\n          <header className=\"App-header\"><span><i class=\"fas fa-code\"></i></span> Morse Encoder\n          </header>\n          <Form\n          message = {this.state.message}\n          handleChange = {this.handleChange}\n          />\n          <Display\n          message = {this.state.message}\n          morseCode = {morseOutput}\n          items = {items}\n          />\n          <Utils \n          message = {this.state.message}\n          morseCode = {output}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}